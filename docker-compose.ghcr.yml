services:
  web:
    # Use an explicit tag when available; fall back to 'latest'.
    # Set WEB_TAG in your environment or .env (e.g., a commit SHA or release tag).
    image: ghcr.io/pvp2max/sadd-app/web:${WEB_TAG:-latest}
    container_name: sadd_web
    pull_policy: always
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - SETUP_KEY=${SETUP_KEY}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - OSRM_URL=${OSRM_URL}
      - NOMINATIM_URL=${NOMINATIM_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_DEBUG=${SMTP_DEBUG}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      # Allow targeting by Watchtower (optional but helpful if you scope updates)
      com.centurylinklabs.watchtower.enable: "true"
    networks:
      - sadd-net

  db:
    image: postgres:16-alpine
    container_name: sadd_db
    environment:
      - POSTGRES_DB=sadd
      - POSTGRES_USER=sadd
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - sadd-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sadd -d sadd || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - sadd-net

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: sadd_tunnel
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    depends_on:
      web:
        condition: service_started
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - sadd-net

  watchtower:
    image: containrrr/watchtower
    container_name: sadd_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount Docker client auth so Watchtower can pull GHCR images.
      # Compose will expand ${DOCKER_CONFIG}; falls back to /root/.docker if unset.
      # Ensure this directory contains a valid config.json after: docker login ghcr.io
      - ${DOCKER_CONFIG:-/root/.docker}:/config:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0/5 * * * *
      - DOCKER_CONFIG=/config
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - sadd-net

volumes:
  sadd-db:

networks:
  sadd-net:
    name: sadd-net
