generator client {
  provider      = "prisma-client-js"
  // Ensure Prisma ships engines compatible with Alpine (musl) + OpenSSL 3
  // used by node:20-alpine. Keep native for local dev.
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  email          String             @unique
  password       String
  disabled       Boolean            @default(false)
  firstName      String
  lastName       String
  rank           String?
  unit           String?
  phone          String?
  role           Role               @default(RIDER)
  rides          Ride[]             @relation("RiderRides")
  drives         Ride[]             @relation("DriverRides")
  coord          Ride[]             @relation("CoordinatorRides")
  pushSubs       PushSubscription[]
  // Back-relation for Van.activeTc
  activeTcOf     Van[]
  // Back-relation for PasswordReset.user
  passwordResets PasswordReset[]
  // Back-relation for ShiftSignup.user
  shiftSignups   ShiftSignup[]
}

model Van {
  id         String    @id @default(uuid())
  name       String    @unique
  capacity   Int
  status     VanStatus @default(ACTIVE)
  activeTc   User?     @relation(fields: [activeTcId], references: [id])
  activeTcId String?
  passengers Int       @default(0)
  currentLat Float?
  currentLng Float?
  lastPing   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  // Back-relation for Ride.van
  rides      Ride[]
}

model Ride {
  id            String     @id @default(uuid())
  rideCode      Int        @unique @default(autoincrement())
  rider         User       @relation("RiderRides", fields: [riderId], references: [id])
  riderId       String
  driver        User?      @relation("DriverRides", fields: [driverId], references: [id])
  driverId      String?
  coordinator   User?      @relation("CoordinatorRides", fields: [coordinatorId], references: [id])
  coordinatorId String?
  source        RideSource @default(REQUEST)
  status        RideStatus @default(PENDING)
  lock          RideLock   @default(NONE)
  notes         String?
  passengers    Int        @default(1)
  pickupLat     Float
  pickupLng     Float
  pickupAddr    String
  dropLat       Float
  dropLng       Float
  dropAddr      String
  requestedAt   DateTime   @default(now())
  acceptedAt    DateTime?
  pickupAt      DateTime?
  dropAt        DateTime?
  vanId         String?
  van           Van?       @relation(fields: [vanId], references: [id])
  rating        Int?
  reviewComment String?
  reviewBypass  Boolean    @default(false)
  reviewAt      DateTime?
}

model Setting {
  id                 Int     @id @default(1)
  active             Boolean @default(false)
  autoDisableEnabled Boolean @default(false)
  autoDisableTime    String  @default("22:00")
  autoDisableTz      String  @default("America/Anchorage")
}

model PushSubscription {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model Audit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  actorId   String?
  action    String
  subject   String?
  details   Json?
}

// Shift scheduling for staffing coordinators (future: roles TC/VOLUNTEER)
enum ShiftRole {
  COORDINATOR
}

model Shift {
  id        String        @id @default(uuid())
  title     String?
  role      ShiftRole     @default(COORDINATOR)
  startsAt  DateTime
  endsAt    DateTime
  needed    Int           @default(1)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  signups   ShiftSignup[]

  @@index([startsAt])
}

model ShiftSignup {
  id        String   @id @default(uuid())
  shift     Shift    @relation(fields: [shiftId], references: [id])
  shiftId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([shiftId, userId])
}

enum Role {
  ADMIN
  COORDINATOR
  TC
  RIDER
}

enum RideStatus {
  PENDING
  ASSIGNED
  EN_ROUTE
  PICKED_UP
  DROPPED
  CANCELED
}

enum RideLock {
  NONE
  SOFT
  HARD
}

enum VanStatus {
  ACTIVE
  MAINTENANCE
  OFFLINE
}

// Added to match Ride.source field
enum RideSource {
  REQUEST
}
