generator client {
  provider      = "prisma-client-js"
  // Ensure Prisma ships engines compatible with Alpine (musl) + OpenSSL 3
  // used by node:20-alpine. Keep native for local dev.
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstName String
  lastName  String
  rank      String?
  unit      String?
  phone     String?
  role      Role     @default(RIDER)
  rides     Ride[]   @relation("RiderRides")
  drives    Ride[]   @relation("DriverRides")
  coord     Ride[]   @relation("CoordinatorRides")
  pushSubs  PushSubscription[]
  // Back-relation for Van.activeTc
  activeTcOf Van[]
}

model Van {
  id        String   @id @default(uuid())
  name      String   @unique
  capacity  Int
  status    VanStatus @default(ACTIVE)
  activeTc  User?    @relation(fields: [activeTcId], references: [id])
  activeTcId String?
  passengers Int      @default(0)
  currentLat Float?
  currentLng Float?
  lastPing   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Back-relation for Ride.van
  rides     Ride[]
}

model Ride {
  id          String   @id @default(uuid())
  rideCode    Int      @unique @default(autoincrement())
  rider       User     @relation("RiderRides", fields: [riderId], references: [id])
  riderId     String
  driver      User?    @relation("DriverRides", fields: [driverId], references: [id])
  driverId    String?
  coordinator User?    @relation("CoordinatorRides", fields: [coordinatorId], references: [id])
  coordinatorId String?
  source      RideSource @default(REQUEST)
  status      RideStatus @default(PENDING)
  lock        RideLock   @default(NONE)
  notes       String?
  passengers  Int        @default(1)
  pickupLat   Float
  pickupLng   Float
  pickupAddr  String
  dropLat     Float
  dropLng     Float
  dropAddr    String
  requestedAt DateTime   @default(now())
  acceptedAt  DateTime?
  pickupAt    DateTime?
  dropAt      DateTime?
  vanId       String?
  van         Van?       @relation(fields: [vanId], references: [id])
  rating      Int?
}

model Setting {
  id      Int    @id @default(1)
  active  Boolean @default(false)
}

model PushSubscription {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model Audit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  actorId   String?
  action    String
  subject   String?
  details   Json?
}

enum Role {
  ADMIN
  COORDINATOR
  TC
  RIDER
}

enum RideStatus {
  PENDING
  ASSIGNED
  EN_ROUTE
  PICKED_UP
  DROPPED
  CANCELED
}

enum RideLock {
  NONE
  SOFT
  HARD
}

enum VanStatus {
  ACTIVE
  MAINTENANCE
  OFFLINE
}

// Added to match Ride.source field
enum RideSource {
  REQUEST
}
